import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

t = 0
t_total = 25
m = 1
k = 1
alpha = 0.25
def Vx(t, x):
    x0, x1 = x
    dx0 = x1
    dx1 = -(x0 * k) * (1 - alpha * x0) / m
    return np.array((dx0, dx1))

V0 = (0, 0) # (x=0, v=0)

sol = solve_ivp(Vx, (t,t_total), [-1, 0], t_eval = np.linspace(0,25,1000))

plt.plot(sol.t, sol.y[0])
plt.plot(sol.t, sol.y[1])

#xs = []
#ys = []
#for i in range(99):
#    xs.append(i)
#    ys.append(Vx(i))
#plt.plot(xs,ys)

t = 0
t_total = 25
m = 1
k = 1
alpha = 0.25
for p in range(1,4):
    def Vx(t, x):
        x0, x1 = x
        dx0 = x1
        dx1 = -(x0 * (p * 2)**-1) / m
        return np.array((dx0, dx1))
    sol = solve_ivp(Vx, (t,t_total), [-1, 0], t_eval = np.linspace(0,25,1000))
    plt.plot(sol.t, sol.y[0])
    plt.plot(sol.t, sol.y[1])

V0 = (0, 0) # (x=0, v=0)

k = 1
for p in range(1,7):
    def Vx(t, x):
        x0, x1 = x
        dx0 = x1
        dx1 = -(x0 * (p * 2)**-1) / m
        return np.array((dx0, dx1))
    sol = solve_ivp(Vx, (t,t_total), [-1.5, 0], t_eval = np.linspace(0,25,1000))
    plt.plot(sol.t, sol.y[0])
    plt.plot(sol.t, sol.y[1])
